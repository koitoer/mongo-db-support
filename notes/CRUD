Create  -   Insert  -   Insert
Read    -   Find    -   Select
Update  -   Update  -   Update
Delete  -   Remove  -   Delete

CRUD operations exist as a methods functions in programming language API's, not a SQL language
Operation code transmitted as a series of bytes over the network, with a protocol.

Insert ------
    db.collection.insert(
        <document or array of documents>,
        {
            writeConcern: <document>,
            ordered: <boolean>         <--- if true and error not process the next one
        }
    );

    db.foo.insert({ document });
    db.foo.insert([ { document1 } ,  { document2 } , { document3 } ]);  <-- Bulk insert.

$mongo -->  Command to connect with mongo.
$help   --> A list of topics

Mongo shell is an interactive javascript.

for(i = 0 ; i < 3; i++) print("hello, MongoDB developer!");
for(i = 0 ; i < 3; i++) print("hello, MongoDB developer!" + i);
z = { a : 1 }
z.a = 1
z["a"] = 1

BSON
Is the data inside the documents
Binary JSON, is a binary-encoded serialization of JSON
double, string (UTF-8), embedded objects, embedded arrays, null, boolean (true, false), floating-point numbers,
binary data type, objectID("_id"), datetime, int32 (NumberInt), int64 (NumberLong), regular expressions(cstring),
timestamps (new Date() = ISODATE())
_id = PK will be immutable, no changes allowed. If you don't provide mongo will provide it (byte*12)
      All document need to have this, required to be present and unique in the collection

doc = { "name" : "Smith", "age" : 30 , "profession" : "hacker"}
db <-- The used database.
db.people <-- Collection

INSERT
db.people.insert(doc);
db.collection.insert(
   <document or array of documents>,
   {
     writeConcern: <document>,
     ordered: <boolean>
   }
)   ----  returning WriteResult OR BulkWriteResult

db.people.find() <-- All the document in the collection
db.collection.find(query, projection)
db.people.findOne() <-- One document random at the collection
db.people.findOne().pretty() <-- More readable
db.people.findOne({ CRITERIA }) <-- Analogous to the WHERE clause
db.people.findOne({ "name" : "Jones" }) <-- Find One with criteria
db.people.findOne({ "name" : { "$ne" : "Jones" }}) <-- Find One with criteria, not EQUALS $ne
db.people.findOne({ CRITERIA }, { FIELDS }) <-- What fields should come back
db.people.findOne({ "name" : "Jones" }, { "name": true, "_id" : false })


for(i=0; i<1000; i++) {
    names = ["exam", "essay", "quiz"];
    for(j=0; j<3; j++){
        db.scores.insert({"student" : i , "type" : names[j], score: Math.round(Math.random()*100)})
    }
}

it-generate a cursor in the server open for 10 minutes, until we exhausted the cursor

db.collection.findOne(query, projection).pretty();
db.people.findOne({ CRITERIA1, CRITERIA2 }, { FIELDS }) <-- What fields should come back
//By default, the _id field is included in the results. !!!!!! -
//To suppress the _id field from the result set, specify _id: 0 in the projection document.

db.scores.findOne({ "student" : 19 , type : "essay"})
db.scores.findOne({ "student" : 19 , type : "essay"}, { "score": 1, "_id" : 0 })
db.scores.findOne({ "student" : 19 , type : "essay"}, { "score": true, "_id" : false })
db.scores.find({ "score" : 50 , type : "essay"}, { "student": true, "_id" : false })
db.scores.count()
db.collection.find(query).count()
db.collection.aggregate(
   [
      { $group: { _id: null, count: { $sum: 1 } } }
   ]
)

Query by example queries.
db.scores.find({ "score" : { $gt : 95 }}) <-- Conditional in a property
db.scores.find({ "score" : { $gt : 95 },  type: "essay" })
db.scores.find({ "score" : { $gt : 95, $lte : 98 },  type: "essay" })
$gte, $lte, $lt, $gt
UTF representation of the string. Not cross data type boundaries.
Not span datatypes, not recommend pattern store different types in the same field.


//Query base on the structure
db.people.find({ profession : { $exists : true}});
//Base on the type of particular field // Numerical code in BSON
db.people.find({ name : { $type : 2 }});
//Support for string patterns with regex, can not be optimized
//Follow Perl Compatible Regular Expression (PCRE)
db.people.find({ name : { $regex : "a" }}); <-- Find where name contains "a"
db.people.find({ name : { $regex : "e$" }}); <-- End with letter "e"
//Can be optimized, with no wildcards.
db.people.find({ name : { $regex : "^A" }}); <-- Start with "A"

$or Operator // prefix operator, takes an array and make OR, array of documents treated as query, UNION
db.people.find({ $or : [
                        {name : {$regex : "e$"}},
                        {age  : {$exists : true}}
                       ]})

$and Operator // Conjunction, could be express in two ways.
db.people.find({ $and : [
                        {name : {$gt : "C"}},
                        {name  : {$regex : "a"}}
                       ]})
//This will be more performing
db.people.find({ name : { $gt : "C", $regex : "a"}})

//The next two are not equals
db.people.find({ score : { $gt : 50, $lt : 60}})
//The second embedded will override the gt 50 will not add  // !!!!!
db.people.find({ score : { $gt : 50} ,  score : { $lt : 60}})


//ARRAYS.
db.accounts.insert({name : "Howard", favorites : ["pretzels", "beer"]});
db.accounts.insert({name : "George", favorites : ["ice cream", "pretzels"]});
//Queries al polymorphic.
db.accounts.find({ favorites : "pretzels" }) <-- Check polymorphic between array and not array.
db.accounts.find({ favorites : "beer" }) <-- String comparison or array search, TOP level in array, not recurse on subdocuments.
db.accounts.find({ favorites : "beer" }, name : { $gt : "H" })
//$all, matches any document that have ALL the specify elements in the array, use another array
//does not import the order but need to match ALL, order does not matter
db.accounts.find({ favorites : { $all : ["pretzels", "beer"] }})
//If you dont use $all, mongo will try to find the exact array, order matters, not need to be the exact match could be subset
db.accounts.find({ favorites :  ["pretzels", "beer"] })
//If you want to search based on index
db.accounts.find({ "favorites.1" :  "beer" })
//$in, matches any of the values that are in the array
db.accounts.find({ name : { $in : ["Howard", "John"] }}
db.accounts.find({ name : { $in : ["Howard"] }})   ===  db.accounts.find({ name : "Howard" });
db.accounts.find({ favorites : { $in : ["beer", "ice cream"] }}

Other array options.
//$nin, matches all the values that are not in the array.
//$not, useful with regular expression to retrieve all the opposite for the query
db.users.find({"id_num" : { "$not" : {"$mod" : [5,1]}}});
//$size is useful to find a array of certain size.
db.accounts.find({ "favorites" :  { $size : 3 } })
//$slice is used to retrieve a window of information
db.blog.posts.findOne({CRITERIA}, {"comments": {$slice : 10}})   <-- Return first 10 comments
db.blog.posts.findOne({CRITERIA}, {"comments": {$slice : -10}})  <-- Return last 10 comments
db.blog.posts.findOne({CRITERIA}, {"comments": {$slice : [23, 10]}})   <-- Skip 23 elements and return 10, 24-33
db.blog.posts.findOne({CRITERIA}, {"comments.$": 1 }})   <-- Return the first comment in the array for criteria
db.test.find({"x" : { "$elementMatch" : {"$gt" : 10, "$lt": 20} }})  <-- Used to compare values one by one in array

Conditional are always in the inner documents ($lt), and modifiers are always the key of outer document ($inc, $and, $or, $not)

//Queries dot notation, document can nest.
db.users.insert({name : "koitoer" , email : { work : "koitoer@ge.com" , personal : "koitoe@gmail.com"}});
db.users.find({email : { work : "koitoer@ge.com" , personal : "koitoe@gmail.com"}}) <-- MATCH
db.users.find({email : { personal : "koitoe@gmail.com", work : "koitoer@ge.com" }}) <-- NOT MATCH, order is IMPORTANT
db.users.find({email : { work : "koitoer@ge.com"}});  <-- NOT MATCH, content is not the same
db.users.find({ "email.work" : "koitoer@ge.com" }); <-- MATCH, allow reach of nested document, specific piece with know of all others.

//Save,
db.collection.save(
   <document>, { writeConcern: <document> }
   )
If document does not contain _id this will be an insert
If document contains the _id this will be an update with upsert= true, basically replace the document content.

//Querying cursors.
When can you change the behavior of a cursor, by applying a sort, skip, or limit to it?
This can be done at any point before the first document is called and before you've checked to see if it is empty.
Before hasNext or next the tranmission of the query is not done.
//Programming loop.
//Cursor are created and return to the shell, so you can use the cursor for programming tasks.
cur = db.people.find(); null;
cur.hasNext();
cur.next();
while(cur.hasNext()) printjson(cur.next());
cur.limit(5); null; <-- Just take 5
while(cur.hasNext()) printjson(cur.next()); <-- Here is when the query is executed in mongodb.
cur.sort({name : -1 }); null; <-- Cursor modifier to give an order. Reverse order. Lexicographically
while(cur.hasNext()) printjson(cur.next()); <-- Here is when the query is executed in mongodb.
cur.sort({name : -1 }).limit(3); null; <-- chaining and modify the cursors, modifier the info before go db.
//Not process in memory there are operators in the sever side.
cur.sort({name : -1 }).limit(3).skip(2); null;  <-- skipping the first two
SORT/SKIP/LIMIT

//Cursor isolation should be done if some writers modify the data in the cursor.

//Counting.
db.scores.find({type : "exam"})
db.scores.count({type : "exam"})
db.scores.find({type : "exam"}).count() -- OK
db.scores.find({type : "exam"}).count({ s : "s"}) --- Ignore internal

//Update - At least two argument
db.collection.update(query, update, options)
db.collection.update(
   <query>,
   <update>,
   {
     upsert: <boolean>,
     multi: <boolean>,
     writeConcern: <document>
   }
)

db.people.update({ CRITERIA }, { REPLACEMENT}) <-- not change the ID, whole cell replacement.
//1. Override any other values, whole set replacement.
db.people.update({ name :  "Smith" },{ name : "Thompson", salary : 50000})

//2. Modify only specific fields.
db.people.update({ name :  "Smith" }, { $set : { age : 30 }}) <-- If don't exists will be created. ADD or MODIFY
db.people.update({ name :  "Smith" }, { $inc : { age : 1 }})  <-- Increment if exist if no create with 1 ADD or MODIFY
                                                                    Create new key with the inc value
//Remove a field from a document
db.people.update({ name :  "Jones" } , { $unset : {"profession" : 1 }}); <-- Remove properties not required

//Manipulate arrays. Arrays are zero-index based
db.arrays.insert({_id : 0 , a : [1, 2, 3, 4]})
db.arrays.update({_id : 0} , {$set : { "a.2" : 5 }}) <--- [1, 2, 5, 4] Modify the third element
db.arrays.push({_id : 0} , {$push : { "a" : 6 }}) <--- [1, 2, 5, 4, 6] Add element at end of array or create new array
db.arrays.push({_id : 0} , {$pop : { "a" : 1 }}) <--- [1, 2, 5, 4 ] Remove one element at the end of array
db.arrays.push({_id : 0} , {$pop : { "a" : -1 }}) <--- [2, 5, 4 ] Remove first element of the array
db.arrays.push({_id : 0} , {$pushAll : { "a" : [7, 8, 9]}}) <--- [2, 5, 4, 7, 8, 9] Add all elements, could have duplicates
db.arrays.push({_id : 0} , {$pull: { "a" : 5 }}) <--- [2, 4, 7, 8, 9]  Remove the selected value from array, no matter the location
                                                                       And remove all the coincidences.
db.arrays.push({_id : 0} , {$pullAll: { "a" : [2, 4, 8] }}) <--- [7, 9]  Remove all the values.
db.arrays.push({_id : 0} , {$addToSet: { "a" : 5 }}) <--- [7, 9, 5]  Add the value to the array
db.arrays.push({_id : 0} , {$addToSet: { "a" : 5 }}) <--- [7, 9, 5]  Idempotent several times.

//3. Upsert > Update or exist (Upsert create new values if no records match.)
If upsert is true and no document matches the query criteria, update() inserts a single document
db.people.update({ name :  "George" }, { $set : { age : 40 }}, {upsert : true }) <-- Construct new element.
Default behaviour is upsert:false The default value is false, which does not insert a new document when no match is found.

//4. Multi-update ( {} <-- Match every document in the collection )
db.people.update({ }, { $set : { title : "Dr" }} ) <-- Just first document in the collection matching, DEFAULT behavior
db.people.update({ }, { $set : { title : "Dr" }}, {multi : true }) <-- Affect all of them
//Update run in one thread, but could pause to let other operations to proceed. "YIELDING", MUTEX lock
//Are not isolated transactions, affect, then yield and then pickup again.
//Atomicity on document level, not see incomplete record information.


//REMOVE
db.collection.remove(
   <query>,
   {
     justOne: <boolean>,
     writeConcern: <document>
   }
)
db.people.remove({CRITERIA})
db.people.remove({}) <-- All will be removed one by one. One by one update. default
db.people.remove({name : "Alice"}) <-- Remove with name alice, NOT need to use MULTI is automatically
db.people.remove() <-- Not permitted
db.people.drop({}) <-- Must faster that be one by one, also discard INDEXES and associated objects
//Are not isolated transactions, affect, then yield and then pickup again.

//FindAndModify
ps = db.runCommand(
    {"findAndModify":"processes",      //Collection to search
    "query" : {"status" : "READY" },   //Criteria based to search
    "sort"  : {"priority" : -1},       //
    "update": { "$set" : {"status" : "RUNNING"} },     //Modifier document that be applied
    "remove": true,                                    //Boolean to specify if document will be removed
    "field" : {"status":1},                            //Field the query will return
    "upsert": true                                     //Boolean to specify if document will be upsert
    ).value


READ OPERATIONS OVERVIEW:

WRITE OPERATIONS OVERVIEW:
All write operations in MongoDB are atomic on the level of a single document.
There are three classes of write operations in MongoDB: insert, update, and delete.
db.collection.insertOne(), db.collection.insertMany(), db.collection.insert()
db.collection.updateOne(), db.collection.updateMany(), db.collection.replaceOne(), db.collection.update()
db.collection.deleteOne(), db.collection.deleteMany(), db.collection.remove()
The db.collection.save() method can either update an existing document or insert a document if the document cannot be found by the _id 
MongoDB provides the db.collection.bulkWrite() method for executing multiple write operations in a group
When a single write operation modifies multiple documents, 
   the modification of each document is atomic, but the operation as a whole is not atomic and other operations may interleave. 
However, you can isolate a single write operation that affects multiple documents using the $isolated operator.
This ensures that no client sees the changes until the write operation completes or errors out.
$isolated does NOT work with sharded clusters.
After every insert, update, or delete operation, MongoDB must update every index associated with the collection in addition to the data itself


WRITE CONCERN : Used to return and ACK/NO ACK when the operation insert is done
Operation w=1 will return when primary node write the content.
w=0 will still report issues in socket or protocol exceptions.
{ w: <value>, j: <boolean>, wtimeout: <number> }


show collections.
db.createCollection("mycol", { capped : true, autoIndexID : true, size : 6142800, max : 10000 } )  --- { "ok" : 1 }
db.createCollection("log", { capped : true, size : 5242880, max : 5000 } )   // This is used to create capped collection
5MB or 5000 documents.
db.createCollection("people", { size: 2147483648 } )  //preallocate 2GB of space.
db.createCollection( "contacts",
   {
      validator: { $or:
         [
            { phone: { $type: "string" } },
            { email: { $regex: /@mongodb\.com$/ } },
            { status: { $in: [ "Unknown", "Incomplete" ] } }
         ]
      }
   }
)   //Can be useful to add validation over the possible records that will insert



/**** SECTION 1 - QUIZZES   ***/

db.fruit.insert({"name":"apple", "color":"red", "shape":"round"}) <-- QUIZ
db.users.findOne({ "username" : "dwight" }, { "email": true, "_id" : false}) <-- QUIZ
db.scores.find({ "score" : 50 , type : "essay"}, { "student": true, "_id" : false }) <-- QUIZ
db.users.find({ "name" : { $regex : "q" },  "email" : {$exists : true}}) <--- QUIZ
db.scores.find({ $or : [
                        {score : {$lt : 50}},
                        {score : {$gt : 90}}
                       ]})    <--- QUIZ

db.catalog.find({ "price" : {$gt : 10000 }, "reviews.rating" : {$gte : 5 } });  <-- QUIZ
db.scores.count({type : "essay", score: {$gt : 90}} ) <--- QUIZ
db.user.update({"username", "splunker"}, {$set : {"country" : "RU"}}) <-- QUIZ
db.users.update({'username': 'jimmy'}, {'$unset': {'interests': 1}}) <--- QUIZ

{ _id : "Mike", interests : [ "botany", "skydiving", "skydiving", "skiing" ] } <-- QUIZ
db.scores.update({ score : {$lt : 70}} , { $inc : { score : 20 }}, {multi : true }) <-- QUIZ
db.scores.remove({score: {$lt:60}}) <-- QUIZ

doc=people.find().first(); <-- QUIZ
new Document("$set", new Document("examiner", "Jones")) <--- QUIZ

//HW2.2
db.grades.find({"score" : {$gte :  65}}).sort({ "score" : 1 }).limit(1)
